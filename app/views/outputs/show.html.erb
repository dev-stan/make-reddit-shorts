<div id="progress-bar-container">
  <p class="hello-world"></p>
  <div class="progress-wrapper">
    <div class="progress">
      <div id="progress-bar" class="progress-value" style="width: <%= @output.progress || 0 %>%;"></div>
    </div>
  </div>
</div>
<!-- Placeholder for the video tag, rendered only when the video is ready -->
<% if @output.progress == 100 && @output.url.present? %>
  <section class="py-12 py-sm-24 position-relative overflow-hidden">
    <div class="container">
      <div class="mw-7xl align-items-center">
        <div class="row mx-auto">
          <div class="col-lg-6 col-xl-6 order-last order-lg-first">
            <%# Substitute image with video here %>
            <div class="d-flex justify-content-center">
              <%= video_tag @output.url, size: "100%", controls: true, id: "video-element", class: "d-block w-50 mw-xl mx-auto rounded-5 p" %>
            </div>
          </div>
          <div class="col-lg-6 col-xl-6 mb-16 mb-lg-0 position-relative" >
            <div class="mw-xl mx-auto me-xl-0 position-relative">
              <h1 class="h3 mb-10 mw-md" style="width: 100%;"><%= main_text = File.read('app/services/resources/title.txt')%></h1>
              <div class="rounded-3 p-5 shadow-sm" style="width: 100%;">
                <h5>Video script</h5>
                <p id="script-preview" style="display: inline;">
                  <%= @output.script.split(' ')[0..4].join(' ') %>
                  <span id="read-more-dots">...</span>
                  <a href="javascript:void(0)" id="toggle-script" style="text-decoration: underline; color: #007bff;">Read more</a>
                </p>
                <p id="script-full" style="display: none; white-space: pre-line;"><%= @output.script %></p>
                <!-- Full script hidden -->
              </div>
              <script>
                document.addEventListener("DOMContentLoaded", function() {
                  const previewElem = document.getElementById("script-preview");
                  const fullScriptElem = document.getElementById("script-full");
                  const toggleButton = document.getElementById("toggle-script");
                  const readMoreDots = document.getElementById("read-more-dots");

                  toggleButton.addEventListener("click", function() {
                    if (fullScriptElem.style.display === "none") {
                      // Show the full script and hide the "Read more" link
                      fullScriptElem.style.display = "inline";
                      previewElem.style.display = "none";
                    }
                  });
                });
              </script>
              <div class="d-flex">
                <div class="col-4">
                  <h5>Subtitles</h5>
                  <div class="d-flex align-items-center">
                    <img id="preset-image-1" src="/text_sample.png" alt="test" class="rounded-3 shadow-sm w-75" style="height: auto;">
                  </div>
                </div>
                <div class="col-4">
                  <h5>Voice</h5>
                  <div class="d-flex align-items-center">
                    <button id="preset-button-1" class="btn rounded-3 shadow-sm" style="width: auto; height: auto; background-color: #EEEEEE;">Ruth</button>
                  </div>
                </div>
                <div class="col-4">
                  <h5>Speed</h5>
                  <div class="d-flex align-items-center">
                    <button id="preset-button-2" class="btn rounded-3 shadow-sm" style="width: auto; height: auto; background-color: #EEEEEE;">Fast</button>
                  </div>
                </div>
              </div>
              <script>
                window.onload = function() {
                  // Get all image-button pairs
                  const imageButtonPairs = [
                    { imageId: 'preset-image-1', buttonId: 'preset-button-1' },
                    { imageId: 'preset-image-1', buttonId: 'preset-button-2' }
                  ];

                  imageButtonPairs.forEach(pair => {
                    var image = document.getElementById(pair.imageId);
                    var button = document.getElementById(pair.buttonId);

                    // Set the button's dimensions to match the image
                    button.style.width = image.offsetWidth + 'px';
                    button.style.height = image.offsetHeight + 'px';
                  });
                };
              </script>
            </div>
            <div class="d-flex gap-3 pt-5 px-2">
              <btn class="btn w-100 btn-primary">Regenerate</btn>
              <btn class="btn w-100 btn-primary">Download</btn>
              <btn class="btn w-100 btn-primary">Upgrade</btn>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<% end %>
</div>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const outputId = <%= @output.id %>;
    let lastProgress = 0;

    // Check if video is already available on page load
    function checkIfVideoExists() {
      const videoElement = document.getElementById("video-element");
      if (videoElement) {
        // Hide the progress bar if the video is already present
        document.getElementById("progress-bar-container").style.display = "none";
        return true; // Video is already present
      }
      return false; // No video yet, proceed with progress bar
    }

    // Messages for different progress stages
    const progressMessages = {
      0: "Getting Reddit post URL",
      20: "Generating voice over",
      35: "Transcribing voice over",
      50: "Creating title image",
      60: "Putting everything together",
      64: "Well at least trying to",
      67: "Trying is what matters",
      69: "Right?",
      73: "This might take a while",
      77: "Kidding! It's almost done",
    };

    // Function to get the appropriate message
    function getProgressMessage(progress) {
      let message = "Processing";
      let percentageMessage = `(${progress}%)`;

      // Check if a message exists for the current progress
      Object.keys(progressMessages).forEach(key => {
        if (progress >= key) {
          message = `${progressMessages[key]} ${percentageMessage}`;
        }
      });

      return message;
    }

    function checkProgress() {
      // If the video is already available, stop checking progress
      if (checkIfVideoExists()) return;

      fetch(`/outputs/${outputId}/progress`)
        .then(response => response.json())
        .then(data => {
          const progress = data.progress;
          const progressBarElem = document.getElementById("progress-bar");
          const messageElem = document.querySelector(".hello-world");

          if (progress > lastProgress) {
            const increment = Math.ceil((progress - lastProgress) / 20);

            function updateProgress(currentProgress) {
              if (currentProgress <= progress) {
                progressBarElem.style.width = currentProgress + "%";

                // Update message and percentage above the bar
                messageElem.innerText = getProgressMessage(currentProgress);

                setTimeout(() => updateProgress(currentProgress + increment), 50); // Adjust timing as needed
              } else {
                progressBarElem.style.width = progress + "%";
                messageElem.innerText = getProgressMessage(progress);
                lastProgress = progress;

                if (progress >= 100) {
                  // Hide the progress bar container once video is ready
                  document.getElementById("progress-bar-container").style.display = "none";

                  // Stop polling and show the video when progress is 100%
                  fetch(`/outputs/${outputId}/video_url`)
                    .then(response => response.json())
                    .then(data => {
                      const videoContainer = document.getElementById("video-container");
                      const videoUrl = data.url;

                      // Dynamically insert the video tag with small size
                      videoContainer.innerHTML = `<video src="${videoUrl}" width="160" height="120" controls></video>`;
                    })
                    .catch(error => console.error("Error loading video URL:", error));
                } else {
                  setTimeout(checkProgress, 1000); // Poll every second
                }
              }
            }

            // Start the incremental update
            updateProgress(lastProgress + increment);
          } else {
            if (lastProgress < 100) {
              const newProgress = Math.min(lastProgress + 1, 100);
              progressBarElem.style.width = newProgress + "%";
              messageElem.innerText = getProgressMessage(newProgress);
              lastProgress = newProgress;
            }

            setTimeout(checkProgress, 500); // Poll every half second
          }
        })
        .catch(error => console.error("Error checking progress:", error));
    }

    // Start polling for progress if the video doesn't already exist
    checkProgress();
  });
</script>
<style>
  body {
    background: url(<%= asset_path('/home/stan/projects/make-reddit-shorts/app/assets/flaro-assets/images/how-it-works/gradient.svg') %>) no-repeat center center fixed;
    background-size: cover;
  }

  #progress-bar-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }

  .hello-world {
    color: #433cc3;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
    margin-bottom: 10px;
  }

  .progress-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .progress {
    background: #433cc3;
    border-radius: 16px;
    display: flex;
    height: 50px;
    width: 400px;
    position: relative;
    overflow: hidden;
    box-shadow: 0px 0px 40px #433cc3;
  }

  .progress-value {
    background: #7770FE;
    height: 100%;
    transition: width 0.5s ease;
    width: 0;
  }

  #video-container video {
    width: 160px; /* Small width */
    height: 120px; /* Small height */
  }
</style>
