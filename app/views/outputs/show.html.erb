<%= render partial: 'progress_bar' %>
<section id="video-section" class="py-12 py-sm-24 position-relative overflow-hidden" style="display: none;">
  <div class="container">
    <div class="mw-7xl align-items-center">
      <div class="row mx-auto">
        <div class="col-lg-6 col-xl-6 order-last order-lg-first">
          <div class="d-flex justify-content-center">
            <% if @output.url.present? %>
              <%= video_tag @output.url, size: "100%", controls: true, id: "video-element", class: "d-block w-50 mw-xl mx-auto rounded-5 shadow" %>
            <% else %>
              <p>Video URL is not available yet.</p>
            <% end %>
          </div>
        </div>
        <div class="col-lg-6 col-xl-6 mb-16 mb-lg-0 position-relative">
          <div class="mw-xl mx-auto me-xl-0 position-relative">
            <h1 class="h3 mb-10 mw-md" style="width: 100%;"><%= main_text = File.read('app/services/resources/title.txt')%></h1>
            <div class="rounded-3 p-5 shadow-sm" style="width: 100%;">
              <h5>Video script</h5>
              <p id="script-preview" style="display: inline;">
                <%= @output.script.split(' ')[0..40].join(' ') %>
                <span id="read-more-dots">...</span>
                <a href="javascript:void(0)" id="toggle-script" style="text-decoration: underline; color: #007bff;">Read more</a>
              </p>
              <p id="script-full" style="display: none; white-space: pre-line;"><%= @output.script %></p>
            </div>
            <div class="rounded-3 p-5 mt-8 shadow-sm" style="width: 100%;">
              <div class="row">
                <div class="col-4 text-center">
                  <div class="d-flex flex-column align-items-center">
                    <h5>Subtitles</h5>
                    <button id="preset-button-2" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;">Preset</button>
                  </div>
                </div>
                <div class="col-4 text-center">
                  <div class="d-flex flex-column align-items-center">
                    <h5>Voice</h5>
                    <button id="preset-button-2" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;">Ruth</button>
                  </div>
                </div>
                <div class="col-4 text-center">
                  <div class="d-flex flex-column align-items-center">
                    <h5>Speed</h5>
                    <button id="preset-button-3" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;">Fast</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex gap-5 mt-10">
              <button class="btn btn-primary rounded-3 shadow-sm mt-2 w-50">Download</button>
              <button class="btn btn-primary rounded-3 shadow-sm mt-2 w-50">Regenerate</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const outputId = <%= @output.id %>;
    const videoUrl = "<%= @output.url %>";
    let lastProgress = 0;

    function checkIfVideoExists() {
      const videoSection = document.getElementById("video-section");
      const progressBarContainer = document.getElementById("progress-bar-container");

      if (videoUrl && videoUrl.length > 0) {
        // Hide progress bar and show the video section if the video URL exists
        if (progressBarContainer) progressBarContainer.style.display = "none";
        videoSection.style.display = "block";
        return true;
      } else {
        // Show progress bar if the video URL doesn't exist
        videoSection.style.display = "none";
        return false;
      }
    }

    // Skip progress check if video already exists
    if (checkIfVideoExists()) {
      return;
    }

    // Messages for different progress stages
    const progressMessages = {
      0: "Getting Reddit post URL",
      20: "Generating voice over",
      35: "Transcribing voice over",
      50: "Creating title image",
      60: "Putting everything together",
      64: "Well at least trying to",
      67: "Trying is what matters",
      69: "Right?",
      73: "This might take a while",
      77: "Kidding! It's almost done",
    };

    function getProgressMessage(progress) {
      let message = "Processing";
      let percentageMessage = `(${progress}%)`;

      Object.keys(progressMessages).forEach(key => {
        if (progress >= key) {
          message = `${progressMessages[key]} ${percentageMessage}`;
        }
      });

      return message;
    }

    function updateProgressBar(currentProgress, targetProgress) {
      const progressBarElem = document.getElementById("progress-bar");
      const messageElem = document.querySelector(".hello-world");

      if (currentProgress < targetProgress) {
        currentProgress += 1;
        progressBarElem.style.width = currentProgress + "%";
        messageElem.innerText = getProgressMessage(currentProgress);
        setTimeout(() => updateProgressBar(currentProgress, targetProgress), 50);
      } else if (currentProgress === targetProgress) {
        if (targetProgress >= 100) {
          if (checkIfVideoExists()) {
            document.getElementById("progress-bar-container").style.display = "none";
            document.getElementById("video-section").style.display = "block";
          } else {
            window.location.reload();
          }
        } else {
          setTimeout(checkProgress, 500);
        }
      }
    }

    function checkProgress() {
      fetch(`/outputs/${outputId}/progress`)
        .then(response => response.json())
        .then(data => {
          const progress = data.progress;
          if (progress > lastProgress) {
            updateProgressBar(lastProgress, progress);
            lastProgress = progress;
          } else {
            setTimeout(checkProgress, 500);
          }
        })
        .catch(error => console.error("Error checking progress:", error));
    }

    // Start checking progress
    checkProgress();

    // Toggle script visibility
    document.getElementById('toggle-script').addEventListener('click', function() {
      const preview = document.getElementById('script-preview');
      const full = document.getElementById('script-full');
      const dots = document.getElementById('read-more-dots');
      const link = this;

      if (full.style.display === 'none') {
        preview.style.display = 'none';
        full.style.display = 'inline';
        dots.style.display = 'none';
        link.textContent = 'Read less';
      } else {
        preview.style.display = 'inline';
        full.style.display = 'none';
        dots.style.display = 'inline';
        link.textContent = 'Read more';
      }
    });
  });
</script>
