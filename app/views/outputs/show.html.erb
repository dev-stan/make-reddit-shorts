<%= render partial: 'progress_bar' %>
<section id="video-section" class="py-12 py-sm-24 position-relative overflow-hidden" style="display: none;">
  <div class="container">
    <div class="mw-7xl align-items-center">
      <div class="row mx-auto">
        <div class="col-lg-6 col-xl-6 order-last order-lg-first">
          <div class="d-flex justify-content-center">
            <% if @output.url.present? %>
              <%= video_tag @output.url, size: "100%", controls: true, id: "video-element", class: "d-block w-50 mw-xl mx-auto rounded-5 shadow" %>
            <% else %>
              <p>Video URL is not available yet.</p>
            <% end %>
          </div>
        </div>
        <div class="col-lg-6 col-xl-6 mb-16 mb-lg-0 position-relative">
          <div class="mw-xl mx-auto me-xl-0 position-relative">
            <h1 class="h3 mb-10 mw-md" style="width: 100%;"><%= main_text = File.read('app/services/resources/title.txt')%></h1>
            <div class="rounded-3 p-5 shadow-sm" style="width: 100%;">
              <h5><i class="fa-solid fa-clipboard"></i> Video script</h5>
              <div id="script-container">
                <p id="script-preview">
                  <%= @output.script.split(' ')[0..40].join(' ') %>
                  <span id="read-more-dots">...</span>
                </p>
                <p id="script-full" style="display: none;"><%= @output.script %></p>
              </div>
              <a href="#" id="toggle-script" style="text-decoration: underline; color: #007bff;">Read more</a>
            </div>
            <div class="rounded-3 p-5 mt-8 shadow-sm" style="width: 100%;">
              <div class="row">
                <div class="col-4 text-center">
                  <div class="d-flex flex-column align-items-center">
                    <h5><i class="fa-solid fa-wand-magic-sparkles"></i> Subtitles </h5>
                    <button id="preset-button-2" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;"><%= @output.subtitle_preset %></button>
                  </div>
                </div>
                <div class="col-4 text-center">
                  <div class="d-flex flex-column align-items-center">
                    <h5><i class="fa-solid fa-microphone"></i>  Voice </h5>
                    <button id="preset-button-2" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;"><%= @output.voice_preset %> </button>
                  </div>
                </div>
                <div class="col-4 text-center">
                  <div class="d-flex flex-column align-items-center">
                    <h5><i class="fa-solid fa-clock"></i>  Speed</h5>
                    <button id="preset-button-3" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;"><%= @output.voice_speed %>%</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex gap-5 mt-10">
              <button class="btn btn-primary rounded-3 shadow-sm mt-2 w-50">Download</button>
              <button class="btn btn-primary rounded-3 shadow-sm mt-2 w-50">Regenerate</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const outputId = <%= @output.id %>;
    const videoUrl = "<%= @output.url %>";
    let lastProgress = 0;
    let artificialProgress = 0;
    let isUpdating = false;
    let completionHandled = false;

    function checkIfVideoExists() {
      const videoSection = document.getElementById("video-section");
      const progressBarContainer = document.getElementById("progress-bar-container");

      if (videoUrl && videoUrl.length > 0) {
        if (progressBarContainer) progressBarContainer.style.display = "none";
        videoSection.style.display = "block";
        return true;
      } else {
        videoSection.style.display = "none";
        return false;
      }
    }

    const progressMessages = {
      0: "Getting Reddit post",
      15: "Fetching data",
      20: "Generating voice over",
      25: "Generating voice over",
      35: "Transcribing voice over",
      50: "Creating title image",
      60: "Editing the video",
      67: "Adding voice",
      69: "Overlaying subtitles",
      73: "This might take a while",
      77: "Almost done",
      95: "Processing"
    };

    function getProgressMessage(progress) {
      let message = "Processing";
      let percentageMessage = `(${progress}%)`;

      Object.keys(progressMessages).forEach(key => {
        if (progress >= parseInt(key)) {
          message = `${progressMessages[key]} ${percentageMessage}`;
        }
      });

      return message;
    }

    function updateProgressBar(currentProgress, targetProgress) {
      if (isUpdating) return;
      isUpdating = true;

      const progressBarElem = document.getElementById("progress-bar");
      const messageElem = document.querySelector(".hello-world");
      const updateInterval = 100; // Slowed down update interval (milliseconds)

      function update() {
        if (currentProgress < targetProgress) {
          currentProgress += 1;
          progressBarElem.style.width = currentProgress + "%";
          messageElem.innerText = getProgressMessage(currentProgress);
          setTimeout(update, updateInterval);
        } else {
          isUpdating = false;
          if (targetProgress >= 100) {
            handleCompletion();
          } else {
            setTimeout(checkProgress, 500);
          }
        }
      }

      update();
    }

    function handleCompletion() {
      if (completionHandled) return;
      completionHandled = true;

      if (checkIfVideoExists()) {
        document.getElementById("progress-bar-container").style.display = "none";
        document.getElementById("video-section").style.display = "block";
      } else {
        // Wait for 1 second before reloading the page
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    }

    function checkProgress() {
      fetch(`/outputs/${outputId}/progress`)
        .then(response => response.json())
        .then(data => {
          let progress = data.progress;
          if (progress > lastProgress) {
            updateProgressBar(lastProgress, progress);
            lastProgress = progress;
            artificialProgress = progress;
          } else {
            artificialProgress = Math.min(artificialProgress + 1, 99);
            updateProgressBar(lastProgress, artificialProgress);
          }
          lastProgress = artificialProgress;
        })
        .catch(error => {
          console.error("Error checking progress:", error);
          setTimeout(checkProgress, 500);
        });
    }

    if (!checkIfVideoExists()) {
      checkProgress();
    }

    // Read More functionality
    const toggleButton = document.getElementById('toggle-script');
    const scriptContainer = document.getElementById('script-container');
    const scriptPreview = document.getElementById('script-preview');
    const scriptFull = document.getElementById('script-full');
    const readMoreDots = document.getElementById('read-more-dots');

    if (toggleButton && scriptContainer && scriptPreview && scriptFull && readMoreDots) {
      toggleButton.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('Toggle button clicked'); // Debug log
        if (scriptFull.style.display === 'none' || scriptFull.style.display === '') {
          scriptPreview.style.display = 'none';
          scriptFull.style.display = 'block';
          readMoreDots.style.display = 'none';
          this.textContent = 'Read less';
          console.log('Showing full script'); // Debug log
        } else {
          scriptPreview.style.display = 'block';
          scriptFull.style.display = 'none';
          readMoreDots.style.display = 'inline';
          this.textContent = 'Read more';
          console.log('Showing script preview'); // Debug log
        }
      });
    } else {
      console.error('One or more elements required for toggle functionality are missing.');
    }
  });
</script>