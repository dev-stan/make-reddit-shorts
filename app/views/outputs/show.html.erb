<%= render partial: 'progress_bar' %>
<!-- Placeholder for the video tag, rendered only when the video is ready -->
<% if @output.progress == 100 && @output.url.present? %>
  <section id="video-section" class="py-12 py-sm-24 position-relative overflow-hidden" style="display: none;">
    <div class="container">
      <div class="mw-7xl align-items-center">
        <div class="row mx-auto">
          <div class="col-lg-6 col-xl-6 order-last order-lg-first">
            <div class="d-flex justify-content-center">
              <%= video_tag @output.url, size: "100%", controls: true, id: "video-element", class: "d-block w-50 mw-xl mx-auto rounded-5 shadow" %>
            </div>
          </div>
          <div class="col-lg-6 col-xl-6 mb-16 mb-lg-0 position-relative">
            <div class="mw-xl mx-auto me-xl-0 position-relative">
              <h1 class="h3 mb-10 mw-md" style="width: 100%;"><%= main_text = File.read('app/services/resources/title.txt')%></h1>
              <div class="rounded-3 p-5 shadow-sm" style="width: 100%;">
                <h5>Video script</h5>
                <p id="script-preview" style="display: inline;">
                  <%= @output.script.split(' ')[0..40].join(' ') %>
                  <span id="read-more-dots">...</span>
                  <a href="javascript:void(0)" id="toggle-script" style="text-decoration: underline; color: #007bff;">Read more</a>
                </p>
                <p id="script-full" style="display: none; white-space: pre-line;"><%= @output.script %></p>
              </div>
              <div class="rounded-3 p-5 mt-8 shadow-sm" style="width: 100%;">
                <div class="row">
                  <div class="col-4 text-center">
                    <div class="d-flex flex-column align-items-center">
                      <h5>Subtitles</h5>
                      <button id="preset-button-2" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;">Preset</button>
                    </div>
                  </div>
                  <div class="col-4 text-center">
                    <div class="d-flex flex-column align-items-center">
                      <h5>Voice</h5>
                      <button id="preset-button-2" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;">Ruth</button>
                    </div>
                  </div>
                  <div class="col-4 text-center">
                    <div class="d-flex flex-column align-items-center">
                      <h5>Speed</h5>
                      <button id="preset-button-3" class="btn rounded-3 shadow-sm mt-2" style="background-color: #EEEEEE; width: 100%; max-width: 150px; height: auto;">Fast</button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="d-flex gap-5 mt-10">
                <button class="btn btn-primary rounded-3 shadow-sm mt-2 w-50">Download</button>
                <button class="btn btn-primary rounded-3 shadow-sm mt-2 w-50">Regenerate</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
<% end %>
</div>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const outputId = <%= @output.id %>;
    let lastProgress = 0;

    // Check if the video is available on page load
    function checkIfVideoExists() {
      const videoElement = document.getElementById("video-element");
      const videoSection = document.getElementById("video-section");
      const progressBarContainer = document.getElementById("progress-bar-container");

      if (videoElement && videoElement.getAttribute('src')) {
        // Ensure video is loaded before showing the section
        if (progressBarContainer) progressBarContainer.style.display = "none";
        videoSection.style.display = "block";
        return true;
      }
      return false;
    }

    // Function to store the video generated state in sessionStorage
    function setVideoGeneratedState() {
      sessionStorage.setItem("videoGenerated", "true");
    }

    // Function to get the video generated state from sessionStorage
    function isVideoGenerated() {
      return sessionStorage.getItem("videoGenerated") === "true";
    }

    // If video is already generated, show it immediately without any checks
    if (isVideoGenerated()) {
      if (checkIfVideoExists()) {
        return; // Stop further checks if video is ready
      }
    }

    // Messages for different progress stages
    const progressMessages = {
      0: "Getting Reddit post URL",
      20: "Generating voice over",
      35: "Transcribing voice over",
      50: "Creating title image",
      60: "Putting everything together",
      64: "Well at least trying to",
      67: "Trying is what matters",
      69: "Right?",
      73: "This might take a while",
      77: "Kidding! It's almost done",
    };

    // Function to get the appropriate message for progress
    function getProgressMessage(progress) {
      let message = "Processing";
      let percentageMessage = `(${progress}%)`;

      Object.keys(progressMessages).forEach(key => {
        if (progress >= key) {
          message = `${progressMessages[key]} ${percentageMessage}`;
        }
      });

      return message;
    }

    function checkProgress() {
      fetch(`/outputs/${outputId}/progress`)
        .then(response => response.json())
        .then(data => {
          const progress = data.progress;
          const progressBarElem = document.getElementById("progress-bar");
          const messageElem = document.querySelector(".hello-world");

          if (progress > lastProgress) {
            const increment = Math.ceil((progress - lastProgress) / 20);

            function updateProgress(currentProgress) {
              if (currentProgress <= progress) {
                progressBarElem.style.width = currentProgress + "%";
                messageElem.innerText = getProgressMessage(currentProgress);

                setTimeout(() => updateProgress(currentProgress + increment), 50);
              } else {
                progressBarElem.style.width = progress + "%";
                messageElem.innerText = getProgressMessage(progress);
                lastProgress = progress;

                if (progress >= 100) {
                  // Set the video as generated in sessionStorage
                  setVideoGeneratedState();

                  // Check if the video element is ready and show the video section
                  if (checkIfVideoExists()) {
                    document.getElementById("progress-bar-container").style.display = "none";
                    document.getElementById("video-section").style.display = "block";

                    // Optional: Add a small delay before refreshing the page
                    setTimeout(() => {
                      window.location.reload();
                    }, 1000);
                  } else {
                    // Retry after 1 second if video isn't ready yet
                    setTimeout(checkProgress, 1000);
                  }
                } else {
                  setTimeout(checkProgress, 1000);
                }
              }
            }

            updateProgress(lastProgress + increment);
          } else {
            // If the last progress isn't 100, update the progress slowly and continue checking
            if (lastProgress < 100) {
              const newProgress = Math.min(lastProgress + 1, 100);
              progressBarElem.style.width = newProgress + "%";
              messageElem.innerText = getProgressMessage(newProgress);
              lastProgress = newProgress;
            }

            setTimeout(checkProgress, 500);
          }
        })
        .catch(error => console.error("Error checking progress:", error));
    }

    checkProgress();
  });
</script>
